


SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE TYPE "public"."tournament_status" AS ENUM (
    'not_started',
    'started',
    'finished'
);


ALTER TYPE "public"."tournament_status" OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."matchs" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "number" smallint NOT NULL,
    "team1" bigint NOT NULL,
    "team2" bigint NOT NULL,
    "tournament" bigint NOT NULL
);


ALTER TABLE "public"."matchs" OWNER TO "postgres";


ALTER TABLE "public"."matchs" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."day_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."match_scores" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "match" bigint,
    "score_team1" integer,
    "score_team2" integer
);


ALTER TABLE "public"."match_scores" OWNER TO "postgres";


ALTER TABLE "public"."match_scores" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."match_scores_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."players" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying DEFAULT '255'::character varying NOT NULL,
    "tel" character varying DEFAULT '20'::character varying NOT NULL
);


ALTER TABLE "public"."players" OWNER TO "postgres";


ALTER TABLE "public"."players" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."players_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."teams" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" character varying DEFAULT '255'::character varying NOT NULL,
    "player1" bigint,
    "player2" bigint
);


ALTER TABLE "public"."teams" OWNER TO "postgres";


ALTER TABLE "public"."teams" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."teams_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE OR REPLACE VIEW "public"."tournament_summary" AS
 WITH "manche_winners" AS (
         SELECT "ms"."match",
            "m_1"."team1",
            "m_1"."team2",
                CASE
                    WHEN ("ms"."score_team1" > "ms"."score_team2") THEN 1
                    ELSE 0
                END AS "team1_wins_manche",
                CASE
                    WHEN ("ms"."score_team2" > "ms"."score_team1") THEN 1
                    ELSE 0
                END AS "team2_wins_manche",
            "ms"."score_team1",
            "ms"."score_team2"
           FROM ("public"."match_scores" "ms"
             JOIN "public"."matchs" "m_1" ON (("m_1"."id" = "ms"."match")))
        ), "match_summary" AS (
         SELECT "manche_winners"."match",
            "manche_winners"."team1",
            "manche_winners"."team2",
            "sum"("manche_winners"."team1_wins_manche") AS "manches_team1",
            "sum"("manche_winners"."team2_wins_manche") AS "manches_team2",
            "sum"("manche_winners"."score_team1") AS "total_points_team1",
            "sum"("manche_winners"."score_team2") AS "total_points_team2"
           FROM "manche_winners"
          GROUP BY "manche_winners"."match", "manche_winners"."team1", "manche_winners"."team2"
        ), "match_points" AS (
         SELECT "match_summary"."team1" AS "team_id",
            "match_summary"."match" AS "match_id",
                CASE
                    WHEN (("match_summary"."manches_team1" = 2) AND ("match_summary"."manches_team2" = 0)) THEN 3
                    WHEN (("match_summary"."manches_team1" = 2) AND ("match_summary"."manches_team2" = 1)) THEN 2
                    WHEN (("match_summary"."manches_team1" = 1) AND ("match_summary"."manches_team2" = 2)) THEN 1
                    ELSE 0
                END AS "points",
            ("match_summary"."total_points_team1" - "match_summary"."total_points_team2") AS "goal_diff"
           FROM "match_summary"
        UNION ALL
         SELECT "match_summary"."team2" AS "team_id",
            "match_summary"."match" AS "match_id",
                CASE
                    WHEN (("match_summary"."manches_team2" = 2) AND ("match_summary"."manches_team1" = 0)) THEN 3
                    WHEN (("match_summary"."manches_team2" = 2) AND ("match_summary"."manches_team1" = 1)) THEN 2
                    WHEN (("match_summary"."manches_team2" = 1) AND ("match_summary"."manches_team1" = 2)) THEN 1
                    ELSE 0
                END AS "points",
            ("match_summary"."total_points_team2" - "match_summary"."total_points_team1") AS "goal_diff"
           FROM "match_summary"
        )
 SELECT "t"."id" AS "team_id",
    "t"."name" AS "team_name",
    COALESCE("sum"("mp"."points"), (0)::bigint) AS "total_points",
    COALESCE("sum"("mp"."goal_diff"), (0)::numeric) AS "goal_average",
    "m"."number",
    "m"."tournament"
   FROM (("public"."teams" "t"
     LEFT JOIN "match_points" "mp" ON (("mp"."team_id" = "t"."id")))
     JOIN "public"."matchs" "m" ON (("m"."id" = "mp"."match_id")))
  GROUP BY "t"."id", "t"."name", "m"."tournament", "m"."number"
  ORDER BY COALESCE("sum"("mp"."points"), (0)::bigint) DESC, COALESCE("sum"("mp"."goal_diff"), (0)::numeric) DESC;


ALTER VIEW "public"."tournament_summary" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."tournament_teams" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "team" bigint NOT NULL,
    "tournament" bigint
);


ALTER TABLE "public"."tournament_teams" OWNER TO "postgres";


ALTER TABLE "public"."tournament_teams" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tournament_teams_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."tournaments" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "year" integer NOT NULL,
    "name" character varying DEFAULT '255'::character varying,
    "status" "public"."tournament_status" DEFAULT 'not_started'::"public"."tournament_status" NOT NULL
);


ALTER TABLE "public"."tournaments" OWNER TO "postgres";


ALTER TABLE "public"."tournaments" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tournaments_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."matchs"
    ADD CONSTRAINT "day_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."match_scores"
    ADD CONSTRAINT "match_scores_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."players"
    ADD CONSTRAINT "players_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tournaments"
    ADD CONSTRAINT "tournament_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tournament_teams"
    ADD CONSTRAINT "tournament_teams_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."tournaments"
    ADD CONSTRAINT "tournament_year_key" UNIQUE ("year");



ALTER TABLE ONLY "public"."matchs"
    ADD CONSTRAINT "day_team1_fkey" FOREIGN KEY ("team1") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."matchs"
    ADD CONSTRAINT "day_team2_fkey" FOREIGN KEY ("team2") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."matchs"
    ADD CONSTRAINT "day_tournament_fkey" FOREIGN KEY ("tournament") REFERENCES "public"."tournaments"("id");



ALTER TABLE ONLY "public"."match_scores"
    ADD CONSTRAINT "match_scores_match_fkey" FOREIGN KEY ("match") REFERENCES "public"."matchs"("id");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_player1_fkey" FOREIGN KEY ("player1") REFERENCES "public"."players"("id");



ALTER TABLE ONLY "public"."teams"
    ADD CONSTRAINT "teams_player2_fkey" FOREIGN KEY ("player2") REFERENCES "public"."players"("id");



ALTER TABLE ONLY "public"."tournament_teams"
    ADD CONSTRAINT "tournament_teams_team_fkey" FOREIGN KEY ("team") REFERENCES "public"."teams"("id");



ALTER TABLE ONLY "public"."tournament_teams"
    ADD CONSTRAINT "tournament_teams_tournament_fkey" FOREIGN KEY ("tournament") REFERENCES "public"."tournaments"("id");



CREATE POLICY "Allow all to insert" ON "public"."match_scores" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "Allow read to all" ON "public"."match_scores" FOR SELECT TO "authenticated", "anon" USING (true);



CREATE POLICY "Allow read to all" ON "public"."tournament_teams" FOR SELECT TO "authenticated", "anon" USING (true);



CREATE POLICY "Allow read to all" ON "public"."tournaments" FOR SELECT TO "authenticated", "anon" USING (true);



CREATE POLICY "allow all to update" ON "public"."tournaments" FOR UPDATE TO "authenticated", "anon" USING (true);



CREATE POLICY "allow create to all" ON "public"."players" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "allow create to all" ON "public"."teams" FOR INSERT TO "authenticated", "anon" WITH CHECK (true);



CREATE POLICY "allow delete to all" ON "public"."teams" FOR DELETE TO "authenticated", "anon" USING (true);



CREATE POLICY "allow read to all" ON "public"."players" FOR SELECT TO "authenticated", "anon" USING (true);



CREATE POLICY "allow read to all" ON "public"."teams" FOR SELECT TO "authenticated", "anon" USING (true);



ALTER TABLE "public"."match_scores" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."players" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."teams" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."tournaments" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."match_scores";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";














































































































































































GRANT ALL ON TABLE "public"."matchs" TO "anon";
GRANT ALL ON TABLE "public"."matchs" TO "authenticated";
GRANT ALL ON TABLE "public"."matchs" TO "service_role";



GRANT ALL ON SEQUENCE "public"."day_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."day_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."day_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."match_scores" TO "anon";
GRANT ALL ON TABLE "public"."match_scores" TO "authenticated";
GRANT ALL ON TABLE "public"."match_scores" TO "service_role";



GRANT ALL ON SEQUENCE "public"."match_scores_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."match_scores_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."match_scores_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."players" TO "anon";
GRANT ALL ON TABLE "public"."players" TO "authenticated";
GRANT ALL ON TABLE "public"."players" TO "service_role";



GRANT ALL ON SEQUENCE "public"."players_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."players_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."players_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."teams" TO "anon";
GRANT ALL ON TABLE "public"."teams" TO "authenticated";
GRANT ALL ON TABLE "public"."teams" TO "service_role";



GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."teams_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."tournament_summary" TO "anon";
GRANT ALL ON TABLE "public"."tournament_summary" TO "authenticated";
GRANT ALL ON TABLE "public"."tournament_summary" TO "service_role";



GRANT ALL ON TABLE "public"."tournament_teams" TO "anon";
GRANT ALL ON TABLE "public"."tournament_teams" TO "authenticated";
GRANT ALL ON TABLE "public"."tournament_teams" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tournament_teams_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tournament_teams_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tournament_teams_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."tournaments" TO "anon";
GRANT ALL ON TABLE "public"."tournaments" TO "authenticated";
GRANT ALL ON TABLE "public"."tournaments" TO "service_role";



GRANT ALL ON SEQUENCE "public"."tournaments_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tournaments_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tournaments_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";































RESET ALL;
